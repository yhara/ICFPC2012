#!/usr/bin/env ruby
# coding: utf-8
require 'trollop'
require_relative "../lib/lambda_lifter"

#require_relative "../lib/lambda_lifter/my_solver.rb"
#class LambdaLifter
#  remove_const :Solver
#  Solver = MySolver
#end

def solve!(maptxt, opts)
  mine = LambdaLifter::Mine.new(maptxt)
  sdl(mine) if opts[:sdl]
  puts "solving..."
  route = LambdaLifter::Solver.new(mine.dup).solve
  puts "route: #{route}"

  route.each_char do |cmd|
    break if mine.finished?
    puts mine.ascii_map
    puts "score: #{mine.score}  next command: #{cmd}"

    sleep opts[:wait]

    mine.step!(cmd)
    sdl(mine) if opts[:sdl]
  end
  puts 
  puts "result: #{mine.finished?}"
  puts "score: #{mine.score}"
end

opts = Trollop.options do
  banner "usage: #$0 mapfile"

  opt :sdl, "SDLによる描画を行う", default: false
  opt :wait, "ウェイト(デフォルト: 0.5秒)", default: 0.5
  opt :help, "ヘルプ"
end
Trollop.die "missing filename" if ARGV.size == 0
Trollop.die if opts[:help]

if opts[:sdl]
  require_relative "../../../mygame/sdlview.rb"

  Thread.start{
    solve!(ARGF.read, opts)
  }
  LambdaLifter::SdlVisualizer.instance.run
else
  solve!(ARGF.read, opts)
end
